import os
import random
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

# Diccionario con usuarios y contraseñas
USUARIOS = {
    "yaelmg23": "123456789",
    "usuario1": "contraseña1",
    "usuario2": "contraseña2"
}
intentos_restantes = 3

# Clase del juego Ahorcado
class Ahorcado:
    def __init__(self, palabra):
        self.palabra = palabra.upper()
        self.intentos = 6
        self.letras_adivinadas = set()
        self.letras_erroneas = set()
        self.estado_dibujo = [
            """
               -----
               |   |
                   |
                   |
                   |
                   |
            =========""",
            """
               -----
               |   |
               O   |
                   |
                   |
                   |
            =========""",
            """
               -----
               |   |
               O   |
               |   |
                   |
                   |
            =========""",
            """
               -----
               |   |
               O   |
              /|   |
                   |
                   |
            =========""",
            """
               -----
               |   |
               O   |
              /|\\  |
                   |
                   |
            =========""",
            """
               -----
               |   |
               O   |
              /|\\  |
              /    |
                   |
            =========""",
            """
               -----
               |   |
               O   |
              /|\\  |
              / \\  |
                   |
            ========="""
        ]

    def mostrar_estado(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        print(self.estado_dibujo[6 - self.intentos])
        palabra_mostrada = ''.join(
            [letra if letra in self.letras_adivinadas else '_' for letra in self.palabra]
        )
        print("\nPalabra: ", ' '.join(palabra_mostrada))
        print("\nLetras erróneas: ", ', '.join(sorted(self.letras_erroneas)))

    def adivinar(self, letra):
        letra = letra.upper()
        if letra in self.letras_adivinadas or letra in self.letras_erroneas:
            print("Ya intentaste esa letra. Intenta otra.")
        elif letra in self.palabra:
            self.letras_adivinadas.add(letra)
            print("¡Correcto!")
        else:
            self.letras_erroneas.add(letra)
            self.intentos -= 1
            print("¡Incorrecto!")

    def juego_terminado(self):
        if self.intentos == 0:
            self.mostrar_estado()
            print("\n¡Perdiste! La palabra era:", self.palabra)
            return True
        if all(letra in self.letras_adivinadas for letra in self.palabra):
            self.mostrar_estado()
            print("\n¡Felicidades! ¡Adivinaste la palabra!")
            return True
        return False


def jugar():
    palabras = ["Python", "Programacion", "Roldan", "Java"]
    palabra_secreta = random.choice(palabras)
    juego = Ahorcado(palabra_secreta)

    print("¡Bienvenido al juego del ahorcado!")
    print("Adivina la palabra antes de que se termine el dibujo.")

    while not juego.juego_terminado():
        juego.mostrar_estado()
        letra = input("\nIntroduce una letra: ").strip()
        if len(letra) != 1 or not letra.isalpha():
            print("Por favor, ingresa solo una letra válida.")
            continue
        juego.adivinar(letra)


# Función para verificar las credenciales
def verificar_credenciales():
    global intentos_restantes
    usuario, contraseña = entrada_usuario.get(), entrada_contraseña.get()

    if usuario in USUARIOS and USUARIOS[usuario] == contraseña:
        messagebox.showinfo("Acceso permitido", "¡Bienvenido! Accediendo al juego...")
        ventana.destroy()
        mostrar_reglas()
    else:
        intentos_restantes -= 1
        if intentos_restantes > 0:
            messagebox.showerror(
                "Acceso denegado", f"Credenciales incorrectas. Intentos restantes: {intentos_restantes}"
            )
        else:
            messagebox.showerror("Acceso bloqueado", "Has alcanzado el límite de intentos. Intenta más tarde.")
            ventana.destroy()


# Función para mostrar las reglas y tu nombre
def mostrar_reglas():
    ventana_reglas = tk.Tk()
    ventana_reglas.title("Reglas del Juego")
    ventana_reglas.geometry("500x400")

    fuente_titulo = ("Arial", 18, "bold")
    fuente_texto = ("Arial", 12)

    titulo = tk.Label(ventana_reglas, text="Reglas del Juego", font=fuente_titulo, fg="blue")
    titulo.pack(pady=20)

    nombre = tk.Label(ventana_reglas, text="Desarrollado por: Moreno Granados Angel Yael", font=fuente_texto)
    nombre.pack(pady=10)

    nombre2 = tk.Label(ventana_reglas, text="Ramirez Avila Ricardo Ivanz", font=fuente_texto)
    nombre2.pack(pady=10)

    reglas = tk.Label(ventana_reglas, text="1. Adivina la palabra.\n2. Tienes 6 intentos.\n3. Cada intento te acerca al ahorcado.", font=fuente_texto, justify="left")
    reglas.pack(pady=10)

    boton_comenzar = tk.Button(ventana_reglas, text="Comenzar Juego", font=fuente_texto, command=lambda: [ventana_reglas.destroy(), jugar()])
    boton_comenzar.pack(pady=20)

    ventana_reglas.mainloop()


# Crear ventana principal del login
ventana = tk.Tk()
ventana.title("Login - Ahorcado")
ventana.geometry("500x400")
ventana.minsize(400, 300)

ruta_fondo = "C:/Users/yaelm/Downloads/Fondo5.jpg"
imagen_fondo_original = Image.open(ruta_fondo)

def actualizar_fondo(event):
    nuevo_ancho, nuevo_alto = ventana.winfo_width(), ventana.winfo_height()
    imagen_redimensionada = imagen_fondo_original.resize((nuevo_ancho, nuevo_alto), Image.LANCZOS)
    imagen_fondo_tk = ImageTk.PhotoImage(imagen_redimensionada)
    fondo_label.config(image=imagen_fondo_tk)
    fondo_label.image = imagen_fondo_tk

imagen_fondo_tk = ImageTk.PhotoImage(imagen_fondo_original)
fondo_label = tk.Label(ventana, image=imagen_fondo_tk)
fondo_label.place(x=0, y=0, relwidth=1, relheight=1)
ventana.bind("<Configure>", actualizar_fondo)

fuente_titulo = ("Arial", 18, "bold")
fuente_texto = ("Arial", 12)

frame_login = tk.Frame(ventana, bg=None, bd=5, relief="ridge")
frame_login.place(relx=0.5, rely=0.5, anchor="center", width=400, height=500)

titulo = tk.Label(frame_login, text="¡La Última Partida!", font=fuente_titulo, fg="red", bg=None)
titulo.pack(pady=(20, 30))

label_usuario = tk.Label(frame_login, text="Usuario:", font=fuente_texto, fg="black", bg=None)
label_usuario.pack(pady=(10, 5))
entrada_usuario = tk.Entry(frame_login, font=fuente_texto, justify="center")
entrada_usuario.pack(pady=(0, 20))

label_contraseña = tk.Label(frame_login, text="Contraseña:", font=fuente_texto, fg="black", bg=None)
label_contraseña.pack(pady=(10, 5))
entrada_contraseña = tk.Entry(frame_login, font=fuente_texto, show="*", justify="center")
entrada_contraseña.pack(pady=(0, 20))

boton_login = tk.Button(frame_login, text="Iniciar sesión", font=fuente_texto, bg="#4682B4", fg="white", command=verificar_credenciales)
boton_login.pack(pady=(20, 10))

ventana.mainloop()
